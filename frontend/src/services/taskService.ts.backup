import axios, { AxiosResponse } from 'axios';
import { TarefaDTO, TarefaResponseDTO } from '../types/Task';

// Base URL da API - usa proxy configurado no package.json
const API_BASE_URL = '/tasks';

// Configuração do axios
const api = axios.create({
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor para tratamento de erros
api.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error('Erro na API:', error.response?.data || error.message);
    return Promise.reject(error);
  }
);

// Interface do serviço de tarefas
export interface TaskService {
  getAllTasks(): Promise<TarefaResponseDTO[]>;
  getTaskById(id: number): Promise<TarefaResponseDTO>;
  createTask(task: TarefaDTO): Promise<TarefaResponseDTO>;
  updateTask(id: number, task: TarefaDTO): Promise<TarefaResponseDTO>;
  deleteTask(id: number): Promise<void>;
  getTasksByStatus(status: string): Promise<TarefaResponseDTO[]>;
  getTaskStats(): Promise<{ total: number; pendentes: number; concluidas: number }>;
}

// Implementação do serviço
export const taskService: TaskService = {
  // GET /tasks - Listar todas as tarefas
  async getAllTasks(): Promise<TarefaResponseDTO[]> {
    const response: AxiosResponse<TarefaResponseDTO[]> = await api.get(API_BASE_URL);
    return response.data;
  },

  // GET /tasks/{id} - Buscar tarefa por ID
  async getTaskById(id: number): Promise<TarefaResponseDTO> {
    const response: AxiosResponse<TarefaResponseDTO> = await api.get(`${API_BASE_URL}/${id}`);
    return response.data;
  },

  // POST /tasks - Criar nova tarefa
  async createTask(task: TarefaDTO): Promise<TarefaResponseDTO> {
    const response: AxiosResponse<TarefaResponseDTO> = await api.post(API_BASE_URL, task);
    return response.data;
  },

  // PUT /tasks/{id} - Atualizar tarefa
  async updateTask(id: number, task: TarefaDTO): Promise<TarefaResponseDTO> {
    const response: AxiosResponse<TarefaResponseDTO> = await api.put(`${API_BASE_URL}/${id}`, task);
    return response.data;
  },

  // DELETE /tasks/{id} - Deletar tarefa
  async deleteTask(id: number): Promise<void> {
    await api.delete(`${API_BASE_URL}/${id}`);
  },

  // GET /tasks/status/{status} - Buscar por status
  async getTasksByStatus(status: string): Promise<TarefaResponseDTO[]> {
    const response: AxiosResponse<TarefaResponseDTO[]> = await api.get(`${API_BASE_URL}/status/${status}`);
    return response.data;
  },

  // GET /tasks/stats - Estatísticas das tarefas
  async getTaskStats(): Promise<{ total: number; pendentes: number; concluidas: number }> {
    try {
      const [all, pending, completed] = await Promise.all([
        this.getAllTasks(),
        this.getTasksByStatus('PENDENTE'),
        this.getTasksByStatus('CONCLUIDA')
      ]);

      return {
        total: all.length,
        pendentes: pending.length,
        concluidas: completed.length
      };
    } catch (error) {
      console.error('Erro ao buscar estatísticas:', error);
      return { total: 0, pendentes: 0, concluidas: 0 };
    }
  }
};

export default taskService;